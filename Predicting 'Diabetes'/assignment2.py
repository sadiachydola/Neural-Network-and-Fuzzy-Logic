# -*- coding: utf-8 -*-
"""Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1egoAjCHKpMcAs_uwuRqhASj-xiy7pSLt
"""

import tensorflow as tf
import numpy as np
from tensorflow import keras

model = keras.Sequential(
    [
     keras.layers.Dense(units=1500, input_dim=8, name='hidden_layer_1'),
     keras.layers.Dense(units=1400, name='hidden_layer_2'),
     keras.layers.Dense(units=1300, name='hidden_layer_3'),
     keras.layers.Dense(units=1200, name='hidden_layer_4'),
     keras.layers.Dense(units=1000, name='hidden_layer_5'),
     keras.layers.Dense(units=800, name='hidden_layer_6'),
     keras.layers.Dense(units=500, name='hidden_layer_7'),
     keras.layers.Dense(units=400, name='hidden_layer_8'),
     keras.layers.Dense(units=300, name='hidden_layer_9'),
     keras.layers.Dense(units=200, name='hidden_layer_10'),
     keras.layers.Dense(units=50, name='hidden_layer_11'),
     keras.layers.Dense(units=20, name='hidden_layer_12'),
     keras.layers.Dense(units=10, name='hidden_layer_13'),
     keras.layers.Dense(units=5, name='hidden_layer_14'),
     keras.layers.Dense(units=1, activation='sigmoid',name='output_layer')
    ]
)
print(model.summary())

# SGD = Stochastic Gradient Descent
model.compile(optimizer=tf.keras.optimizers.Adamax(), loss=tf.keras.losses.BinaryCrossentropy(), metrics=['accuracy'])

from google.colab import files

uploaded = files.upload()

import csv
tsv_file = open("data.tsv")
read_tsv = csv.reader(tsv_file, delimiter="\t")
X1 = []
Y1 = []
ignore = False
for row in read_tsv:
  if ignore == False:
    ignore = True
    continue
  # print(row)
  X1.append(row[:8])
  Y1.append(row[8])

X1 = np.array(X1, float)
Y1 = np.array(Y1, float)
# print(np.shape(X1))
# print(np.shape(Y1))

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X1, Y1, test_size=0.20,shuffle=True)
#print(X_train)

# Training the NN
model.fit(X_train, Y_train, validation_data=(X_test, Y_test),epochs=4000, verbose=1)

pred = model.predict(X_test)
print(Y_test)
print(pred)